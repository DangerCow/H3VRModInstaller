Index: Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Net;\nusing System.Net.NetworkInformation;\n\nnamespace H3VRModInstaller\n{\n    internal class Program\n    {\n        private static readonly ModList mods = new();\n        private static readonly DownloadMods downloader = new();\n        private static readonly InstallMods installer = new();\n\n        private static void Main(string[] args)\n        {\n            if (File.Exists(\"H3VR.exe\"))\n            {\n                Console.WriteLine(\"H3VR.exe detected\");\n                Console.WriteLine(\"Welcome to the H3VR Mod installer!\");\n                Console.WriteLine(\"Please select the mod you would like to install!\");\n                Console.WriteLine(\"1: WurstMod\");\n                Console.WriteLine(\"2: Cursed DLLs\");\n                Console.WriteLine(\"3: TNHTweaker\");\n                //Console.WriteLine(\"4: All (warning, pretty buggy)\");\n                Console.Write(\"Input the mod you would like to install: \");\n                var input = Console.ReadLine();\n                if ((input == \"WurstMod\") | (input == \"Wurst Mod\") | (input == \"wurstmod\") | (input == \"wurst mod\") |\n                    (input == \"1\"))\n                {\n                    Console.WriteLine(\"WurstMod selected\");\n                    if (mods.onlineCheck())\n                    {\n                        downloader.downloadWurstMod(Directory.Exists(Directory.GetCurrentDirectory() + \"/BepInEx/\"));\n                        installer.installWurstMod();\n                        Console.Write(\"Press any key to exit the installer\");\n                        Console.ReadKey();\n                        return;\n                    }\n                }\n\n                if ((input == \"CursedDLLs\") | (input == \"Cursed dlls\") | (input == \"curseddlls\") |\n                    (input == \"Cursed.dlls\") | (input == \"cursed dll\") | (input == \"curseddll\") | (input == \"2\"))\n                {\n                    Console.WriteLine(\"CursedDLLs selected\");\n                    if (mods.onlineCheck())\n                    {\n                        downloader.downloadCursedDlls(Directory.Exists(Directory.GetCurrentDirectory() + \"/BepInEx/\"));\n                        installer.installCurseddlls();\n                        Console.Write(\"Press any key to exit the installer\");\n                        Console.ReadKey();\n                        return;\n                    }\n                }\n\n                if ((input == \"TNHTweaker\") | (input == \"TNH Tweaker\") | (input == \"tnhtweaker\") |\n                    (input == \"tnh tweaker\") | (input == \"3\"))\n                {\n                    Console.WriteLine(\"TNHTweaker selected\");\n                    if (mods.onlineCheck())\n                    {\n                        downloader.downloadTNHTweaker(Directory.Exists(Directory.GetCurrentDirectory() + \"/BepInEx/\"));\n                        installer.installTNHTweaker();\n                        Console.Write(\"Press any key to exit the installer\");\n                        Console.ReadKey();\n                        return;\n                    }\n                }\n\n                if ((input == \"All\") | (input == \"all\") | (input == \"4\"))\n                {\n                    Console.WriteLine(\"All selected\");\n                    if (mods.onlineCheck())\n                        downloader.downloadAll(Directory.Exists(Directory.GetCurrentDirectory() + \"/BepInEx/\"));\n                    installer.installAll();\n                    Console.Write(\"Press any key to exit the installer\");\n                    Console.ReadKey();\n                }\n                else\n                {\n                    Console.WriteLine(\"INVALID INPUT\");\n                    Console.ReadKey();\n                }\n            }\n\n\n            else\n            {\n                Console.WriteLine(\"H3VR.exe not detected!\");\n                Console.ReadKey();\n            }\n        }\n    }\n\n/*\n    public struct Mods\n    {\n        public string[] Path { get; set; }\n        public string[] Files { get; set; }\n    }\n*/\n    internal class ModList\n    {\n        public string[] cursedDllsFiles =\n            {\"BepInEx_x64_5.4.4.0.zip\", \"BepInEx.MonoMod.Loader_1.0.0.0.zip\", \"CursedDlls.BepInEx_v1.3.zip\"};\n\n        public string[] cursedDllsPaths =\n        {\n            \"https://github.com/BepInEx/BepInEx/releases/download/v5.4.4/\",\n            \"https://github.com/BepInEx/BepInEx.MonoMod.Loader/releases/download/v1.0.0.0/\",\n            \"https://github.com/drummerdude2003/CursedDlls.BepinEx/releases/download/v1.3/\"\n        };\n\n        public string[] TNHTweakerFiles = {\"BepInEx_x64_5.4.4.0.zip\", \"TakeAndHoldTweaker.dll\"};\n\n        public string[] TNHTweakerPaths =\n        {\n            \"https://github.com/BepInEx/BepInEx/releases/download/v5.4.4/\",\n            \"https://github.com/devyndamonster/TakeAndHoldTweaker/releases/download/v1.3.0/\"\n        };\n\n        public string[] wurstModFiles = {\"BepInEx_x64_5.4.4.0.zip\", \"Deli-v0.2.5.zip\", \"WurstMod.deli\"};\n\n        public string[] wurstModPaths =\n        {\n            \"https://github.com/BepInEx/BepInEx/releases/download/v5.4.4/\",\n            \"https://github.com/Deli-Counter/Deli/releases/download/v0.2.5/\",\n            \"https://github.com/Nolenz/WurstMod/releases/download/v2.0.2.0/\"\n        };\n\n        public bool onlineCheck()\n        {\n            var checkOnline = new CheckOnline();\n\n            if (checkOnline.isOnline(\"www.github.com\"))\n            {\n                Console.WriteLine(\"GitHub is Online!\");\n                return true;\n            }\n\n            Console.WriteLine(\"Github is either down, or no internet is detected!\");\n            return false;\n        }\n    }\n\n    internal class CheckOnline\n    {\n        public bool isOnline(string URL)\n        {\n            var ping = new Ping();\n            var reply = ping.Send(URL, 1000);\n\n\n            if (reply.Status == IPStatus.Success)\n                return true;\n            return false;\n        }\n    }\n\n    internal class Downloader\n    {\n        private readonly WebClient downloader = new();\n\n        public bool downloadMod(string locationOfFile, string fileToDownload)\n        {\n            Console.WriteLine(\"Downloading Mod \\\"{0}\\\" from \\\"{1}{0}\\\"\\n\", fileToDownload, locationOfFile);\n\n\n            downloader.DownloadFile(locationOfFile + fileToDownload, fileToDownload);\n\n            Console.WriteLine(\"Successfully Downloaded Mod \\\"{0}\\\" from \\\"{1}{0}\\\"\\n\", fileToDownload, locationOfFile);\n\n            return true;\n        }\n    }\n\n    internal class DownloadMods\n    {\n        private readonly Downloader downloader = new();\n        private readonly InstallMods installer = new();\n        private readonly ModList mods = new();\n\n        public bool downloadWurstMod(bool hasBepInEx)\n        {\n            if (!hasBepInEx)\n            {\n                Console.WriteLine(\"BepInEx not detected! Downloading.\");\n                downloader.downloadMod(mods.wurstModPaths[0], mods.wurstModFiles[0]);\n                installer.installBepInEx();\n            }\n\n            /*\n            var wurstModDeps = new List<Mods>\n            {\n                new Mods {Path = mods.wurstModPaths, Files = mods.wurstModFiles}\n            };\n            */\n\n            for (var i = 1; i < 3; i++) downloader.downloadMod(mods.wurstModPaths[i], mods.wurstModFiles[i]);\n            return true;\n        }\n\n        public bool downloadCursedDlls(bool hasBepInEx)\n        {\n            if (!hasBepInEx)\n            {\n                Console.WriteLine(\"BepInEx not detected! Downloading.\");\n                downloader.downloadMod(mods.wurstModPaths[0], mods.wurstModFiles[0]);\n                installer.installBepInEx();\n            }\n\n            for (var i = 1; i < 3; i++) downloader.downloadMod(mods.cursedDllsPaths[i], mods.cursedDllsFiles[i]);\n            return true;\n        }\n\n        public bool downloadTNHTweaker(bool hasBepInEx)\n        {\n            if (!hasBepInEx)\n            {\n                Console.WriteLine(\"BepInEx not detected! Downloading.\");\n                downloader.downloadMod(mods.wurstModPaths[0], mods.wurstModFiles[0]);\n                installer.installBepInEx();\n            }\n\n            for (var i = 1; i < 2; i++) downloader.downloadMod(mods.TNHTweakerPaths[i], mods.TNHTweakerFiles[i]);\n            return true;\n        }\n\n        public bool downloadAll(bool hasBepInEx)\n        {\n            if (!hasBepInEx)\n            {\n                Console.WriteLine(\"BepInEx not detected! Downloading.\");\n                downloader.downloadMod(mods.wurstModPaths[0], mods.wurstModFiles[0]);\n                installer.installBepInEx();\n            }\n\n            for (var i = 1; i < 3; i++)\n            {\n                downloader.downloadMod(mods.wurstModPaths[i], mods.wurstModFiles[i]);\n                downloader.downloadMod(mods.cursedDllsPaths[i], mods.cursedDllsFiles[i]);\n            }\n\n            for (var i = 1; i < 2; i++)\n                downloader.downloadMod(mods.TNHTweakerPaths[i], mods.TNHTweakerFiles[i]);\n\n            return true;\n        }\n    }\n\n    internal class Installer\n    {\n        public bool unzip(string fileToUnzip, string unzipLocation, bool deleteArchiveAfterUnzip)\n        {\n            //why do I even have this?\n            Console.WriteLine(\"Unzipping \" + fileToUnzip);\n            ZipFile.ExtractToDirectory(fileToUnzip, unzipLocation);\n            if (deleteArchiveAfterUnzip)\n                Console.WriteLine(\"Cleaning up\");\n            File.Delete(fileToUnzip);\n            return true;\n        }\n\n        public bool moveFileToPlugins(string fileToMove, string locationToMoveTo = \"BepInEx/Plugins\")\n        {\n            //this is even more redundant!\n            File.Move(fileToMove, locationToMoveTo + fileToMove);\n            return true;\n        }\n\n        public bool moveDirToBepInEx(string dirToMove, string locationToMoveTo)\n        {\n            //more redundancy\n            Directory.Move(dirToMove, locationToMoveTo + dirToMove);\n            return true;\n        }\n\n        public bool installDeliMod(string deliMod, string modsDir = \"Mods/\")\n        {\n            if (!Directory.Exists(modsDir))\n                Directory.CreateDirectory(modsDir);\n            File.Move(deliMod, modsDir + deliMod);\n            return true;\n        }\n    }\n\n    internal class InstallMods\n    {\n        private static readonly Installer installer = new();\n\n        public bool installBepInEx()\n        {\n            installer.unzip(\"BepInEx_x64_5.4.4.0.zip\", Directory.GetCurrentDirectory() + \"/\", false);\n            Console.WriteLine(\"Installed BepInEx!\");\n            return true;\n        }\n\n        public bool installWurstMod()\n        {\n            installer.unzip(\"Deli-v0.2.5.zip\", Directory.GetCurrentDirectory(), true);\n            Console.WriteLine(\"Installed Deli!\");\n\n            installer.installDeliMod(\"WurstMod.deli\");\n            Console.WriteLine(\"Installed WurstMod!\");\n            return true;\n        }\n\n        public bool installCurseddlls()\n        {\n            installer.unzip(\"BepInEx.MonoMod.Loader_1.0.0.0.zip\", Directory.GetCurrentDirectory() + \"/\", true);\n            Console.WriteLine(\"Installed Monomod!\");\n            installer.unzip(\"CursedDlls.BepInEx_v1.3.zip\", Directory.GetCurrentDirectory() + \"/\", true);\n            Console.WriteLine(\"Installed Cursed.Dlls!\");\n            return true;\n        }\n\n        public bool installTNHTweaker()\n        {\n            installer.moveFileToPlugins(\"/TakeAndHoldTweaker.dll\");\n            Console.WriteLine(\"Installed TNH Tweaker!\");\n            return true;\n        }\n\n        public bool installAll()\n        {\n            Console.WriteLine(\"Installing WurstMod!\");\n            installWurstMod();\n            Console.WriteLine(\"Installing Cursed Dlls!\");\n            installCurseddlls();\n            Console.WriteLine(\"Installing TNH Tweaker!\");\n            installTNHTweaker();\n\n            Console.WriteLine(\"Successfully installed ALL mods!\");\n            return true;\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Program.cs b/Program.cs
--- a/Program.cs	(revision 92601de8b153ad14618c1a70b02197f74b60063e)
+++ b/Program.cs	(date 1607828777353)
@@ -8,8 +8,8 @@
 {
     internal class Program
     {
-        private static readonly ModList mods = new();
-        private static readonly DownloadMods downloader = new();
+        private static readonly ModList mods = new ModList();
+        private static readonly DownloadMods downloader = new DownloadMod();
         private static readonly InstallMods installer = new();
 
         private static void Main(string[] args)
